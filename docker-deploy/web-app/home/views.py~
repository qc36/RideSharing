from django.urls import reverse
from django.contrib import auth
from django.contrib.auth.models import User,Group
from django.contrib.auth import authenticate
from django.http import HttpResponseRedirect,HttpResponse
from django.shortcuts import render,get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import Permission,ContentType    
from django.contrib.auth.mixins import LoginRequiredMixin
  
# Create your views here.
from .models import Owner, Order, Driver

def index(request):
    return render(
        request,
        'index.html',
     #   context={'num_books':num_books,'num_instances':num_instances,'num_instances_available':num_instances_available,'num_authors':num_authors},
    )
from django.views import generic


class OrderListView(LoginRequiredMixin,generic.ListView):
    login_url = '/home/login/'
    redirect_field_name = 'redirect_to'
    model = Order
    # select avaliable driver 
    #def get_queryset(self):
    #    return Book.objects.filter(title__icontains='war')[:5] 
class OrderDetailView(LoginRequiredMixin,generic.DetailView):
    login_url = '/home/login/'
    redirect_field_name = 'redirect_to'
    model = Order
    
class OwnerListView(LoginRequiredMixin,generic.ListView):
    login_url = '/home/login/'
    redirect_field_name = 'redirect_to'
    model = Owner
    # select avaliable driver
    #def get_queryset(self):
    #    return Book.objects.filter(title__icontains='war')[:5]
class OwnerDetailView(generic.DetailView):
    login_url = '/home/login/'
    redirect_field_name = 'redirect_to'
    model = Owner
class DriverHistView(LoginRequiredMixin,generic.DetailView):~
    login_url = '/home/login/'
    redirect_field_name = 'redirect_to'
    model= Driver
class OwnerHistView(LoginRequiredMixin,generic.DetailView):~
    login_url = '/home/login/'
    redirect_field_name = 'redirect_to'
    model= Owner

    
from django.contrib.auth.decorators import login_required
from .forms import RegistrationForm, LoginForm
from django.core.exceptions import ObjectDoesNotExist
def dregist(request):
    if request.method == 'GET':
        form = RegistrationForm()
    if request.method == 'POST':       
        form = RegistrationForm(request.POST)   
        if form.is_valid():
          username = form.clean_username()     
          email = form.clean_email()
          password1 = form.clean_psw1()     
          password = form.clean_psw2()  
          phone=form.clean_phone()
          group=form.cleaned_data.get('group')
          size=form.cleaned_data.get('size')
          first_name=form.cleaned_data.get('first_name')
          last_name=form.cleaned_data.get('last_name')
          if password1 and password and password1 != password:                   
              return render(request, 'home/register.html', {'form': form,'message': 'Password mismatch. Please enter again.'})  
          else:               
            user = User.objects.create_user(username=username,email=email,password=password)
            user.save()
            if(group==1):
                groupp = Group.objects.filter(name='Owner').first()
                user.groups.add(groupp)
                permission = Permission.objects.get(codename='change_order_info')
                user.user_permissions.add(permission)
                permission = Permission.objects.get(codename='create_order')
                user.user_permissions.add(permission)
                user.save()
                if user.has_perm('home.change_order_info'):
                    print('owner can change order info')
                owner=Owner.objects.create(user=user); 
                owner.phone=phone
                owner.first_name=first_name
                owner.last_name=last_name
                owner.save()
            else:
                groupp = Group.objects.filter(name='Driver').first()
                user.groups.add(groupp)
                content_type = ContentType.objects.get_for_model(Order)
                permission = Permission.objects.get(codename='confirm_order')
                user.user_permissions.add(permission)
                user.save()
                if user.has_perm('home.confirm_order'):
                    print('friver can confirm order')
                user.save()
                driver=Driver.objects.create(user=user); 
                driver.phone=phone
                driver.first_name=first_name
                driver.last_name=last_name
                if size==5:
                    driver.size='5'
                else:
                    driver.size='7'
                driver.save()                       
            return HttpResponseRedirect("/home/login/")
            
    return render(request, 'home/register.html', {'form': form})
        
def dlogin(request):
  if request.method == 'GET':
    form = LoginForm()    
  if request.method == 'POST':       
    form = LoginForm(request.POST)        
    if form.is_valid():  
             
      username = form.clean_username()                   
      password=form.cleaned_data.get('password')        
              
      user = auth.authenticate(username=username, password=password)            
      if user:               
        auth.login(request, user)              
        return HttpResponseRedirect("/home/")
      else :
        return render(request, 'home/login.html', {'form': form,'message': 'Wrong password. Please try again.'})
        
  return render(request, 'home/login.html', {'form': form})
  

def dlogout(request):

    if request.method == 'GET':
        auth.logout(request)
        return render(request, 'home/logout.html', {'message': 'You are logout.'})
